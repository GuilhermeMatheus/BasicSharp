using BasicSharp.Compiler.Analyzer;
using BasicSharp.Compiler.Parser.Syntaxes;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BasicSharp.Compiler.ILEmitter
{
    public sealed class CodeGenerator
    {
        const string HEADER = "// ***** MSIL Generated by BSharp Compiler ***** \n";
        const string NAME = "NAME";
        const string ASSEMBLY_FORMAT = ".assembly NAME {  }";

        CompilationBag bag;
        CompilationUnit compilationUnit;

        static CodeGenerator()
        {
            CultureInfo.DefaultThreadCurrentCulture = CultureInfo.CreateSpecificCulture("en-US");
        }

        public CodeGenerator(CompilationBag bag, CompilationUnit compilationUnit)
        {
            this.bag = bag;
            this.compilationUnit = compilationUnit;
        }

        public string Translate()
        {
            var builder = new StringBuilder(HEADER);

            var myModule = ASSEMBLY_FORMAT.Replace(NAME, bag.Project.Name);
            builder.AppendLine(myModule);

            var implementsEmitter = new ImplementsEmitter(bag);
            foreach (var item in compilationUnit.ImplementsDirectives)
                implementsEmitter.BuildString(builder, item);

            var moduleEmitter = new ModuleEmitter(bag);

            moduleEmitter.BuildString(builder, compilationUnit.Module);

            return builder.ToString();
        }
    }
}
